<?xml version="1.0" encoding="utf-8"?>
<mscript xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <version>7.7</version>
   <date>2010-11-29</date>
   <cell>
      <count>1</count>
      <steptitle>Program VePro</steptitle>
      <text>
         <pre>    The  program VePro, using a  linearized fully parabolic version
  of the  depth-averaged  flow  equations, calculates an analytical
  solution for the transverse distribution of longitudinal velosity
  in  rectangular channels  and  as well as in channels of compound
  cross-section.
    The program  also calculates the  discharge with the Analytical
  method and with the Mannings formula.
  Here  we give an  example  for a channel with two  cross-sections.</pre>
      </text>
      <mcode>    %_____________________________# INPUT #________________________________
    % Insert the sum of the cross sections
    cs=2;

    % Insert the hights hi=[h1,h2,h3....hv]
    hi=[0.025,0.05];

    % Insert the width of each cross section Dy=[Dy1,Dy2,Dy3....Dyv]
    Dy=[0.19,0.37];

    % Insert the manning number ni=[n1,n2,n3....nv]
    ni=[0.0116,0.0116];

    % Insert the discretization accuracy
    Sum=1000;

    % Insert the slope
    s=0.00047;

    % Insert the Gravity (m/s^2)
    g=9.81;

    % Insert the cv=[cv1,cv2,cv3....cvv]
    Cv=[0.20,0.20];
    %______________________________________________________________________

%__________________________________## BEGIN ##_____________________________
%Setting the matrices where we will save the parameters
    h=[hi,0];
    n=[ni,0];
    a=zeros(1,cs);
    b=zeros(1,cs);
    Cf=zeros(1,cs);
    gt=zeros(1,cs);
    H=zeros(1,cs+1);
    Ai=zeros(1,cs);
    Bi=zeros(1,cs);
    Ci=zeros(1,cs);
    Di=zeros(1,cs);
    Gt1=zeros(1,cs);
    Gt2=zeros(1,cs);
    Ca=zeros(1,cs);
    Cb=zeros(1,cs);

% Calculate the α, b, γ parameters for each cross-section

    for k=1:cs

        Cf(k)=n(k)^2*g/(h(k)^(1/3));
        a(k)=sqrt(2*sqrt(Cf(k))/(Cv(k)*h(k)^2));
        b(k)=-a(k)^2*g*(h(k))*s/Cf(k);
        gt(k)=-b(k)/a(k)^2;

        H(k+1)=(n(k+1)/n(k))*(h(k+1)/h(k))^(5/6);
    end

% Print on screen the matrices [Cf],[a],[b],[γ]
   sp=[Cf',a',b',gt'];
   format short e;
   disp('     [Cf]          [a]          [b]          [γ]');
   disp(sp);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">    <mwsh:comments xml:space="preserve">%_____________________________# INPUT #________________________________</mwsh:comments>
    <mwsh:comments xml:space="preserve">% Insert the sum of the cross sections</mwsh:comments>
    cs=2;

    <mwsh:comments xml:space="preserve">% Insert the hights hi=[h1,h2,h3....hv]</mwsh:comments>
    hi=[0.025,0.05];

    <mwsh:comments xml:space="preserve">% Insert the width of each cross section Dy=[Dy1,Dy2,Dy3....Dyv]</mwsh:comments>
    Dy=[0.19,0.37];

    <mwsh:comments xml:space="preserve">% Insert the manning number ni=[n1,n2,n3....nv]</mwsh:comments>
    ni=[0.0116,0.0116];

    <mwsh:comments xml:space="preserve">% Insert the discretization accuracy</mwsh:comments>
    Sum=1000;

    <mwsh:comments xml:space="preserve">% Insert the slope</mwsh:comments>
    s=0.00047;

    <mwsh:comments xml:space="preserve">% Insert the Gravity (m/s^2)</mwsh:comments>
    g=9.81;

    <mwsh:comments xml:space="preserve">% Insert the cv=[cv1,cv2,cv3....cvv]</mwsh:comments>
    Cv=[0.20,0.20];
    <mwsh:comments xml:space="preserve">%______________________________________________________________________</mwsh:comments>

<mwsh:comments xml:space="preserve">%__________________________________## BEGIN ##_____________________________</mwsh:comments>
<mwsh:comments xml:space="preserve">%Setting the matrices where we will save the parameters</mwsh:comments>
    h=[hi,0];
    n=[ni,0];
    a=zeros(1,cs);
    b=zeros(1,cs);
    Cf=zeros(1,cs);
    gt=zeros(1,cs);
    H=zeros(1,cs+1);
    Ai=zeros(1,cs);
    Bi=zeros(1,cs);
    Ci=zeros(1,cs);
    Di=zeros(1,cs);
    Gt1=zeros(1,cs);
    Gt2=zeros(1,cs);
    Ca=zeros(1,cs);
    Cb=zeros(1,cs);

<mwsh:comments xml:space="preserve">% Calculate the α, b, γ parameters for each cross-section</mwsh:comments>

    <mwsh:keywords xml:space="preserve">for</mwsh:keywords> k=1:cs

        Cf(k)=n(k)^2*g/(h(k)^(1/3));
        a(k)=sqrt(2*sqrt(Cf(k))/(Cv(k)*h(k)^2));
        b(k)=-a(k)^2*g*(h(k))*s/Cf(k);
        gt(k)=-b(k)/a(k)^2;

        H(k+1)=(n(k+1)/n(k))*(h(k+1)/h(k))^(5/6);
    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:comments xml:space="preserve">% Print on screen the matrices [Cf],[a],[b],[γ]</mwsh:comments>
   sp=[Cf',a',b',gt'];
   format <mwsh:strings xml:space="preserve">short</mwsh:strings> <mwsh:strings xml:space="preserve">e</mwsh:strings>;
   disp(<mwsh:strings xml:space="preserve">'     [Cf]          [a]          [b]          [γ]'</mwsh:strings>);
   disp(sp);</mwsh:code></mcode-xmlized>
      <mcode-count>1</mcode-count>
      <cellOutputTarget>1</cellOutputTarget>
      <mcodeoutput>     [Cf]          [a]          [b]          [γ]
  4.5145e-003  3.2788e+001 -2.7449e+001  2.5533e-002
  3.5831e-003  1.5474e+001 -1.5405e+001  6.4339e-002

</mcodeoutput>
   </cell>
   <cell>
      <count>2</count>
      <steptitle>Assembling the matrices  A,B,C,D</steptitle>
      <mcode>for i=1:cs
    for j=1:cs

          Ai(i,i)=-1;
          Bi(i,i)=-1;

          Ci(i,i)=exp(a(i)*Dy(i));
          Di(i,i)=-exp(-a(i)*Dy(i));

        if i==j+1
           Ai(i,j)=exp(a(j)*Dy(j));
           Bi(i,j)=exp(-a(j)*Dy(j));
        end;

        if i==j-1
           Ci(i,j)=-H(i+1)*a(i+1)/a(i);
           Di(i,j)=H(i+1)*a(i+1)/a(i);
        end;


    end
end

% Corrections added to the matrices
       Ai(1,1)=1;
       Bi(1,1)=1;
       Di(cs,cs)=-Di(cs,cs);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:keywords xml:space="preserve">for</mwsh:keywords> i=1:cs
    <mwsh:keywords xml:space="preserve">for</mwsh:keywords> j=1:cs

          Ai(i,i)=-1;
          Bi(i,i)=-1;

          Ci(i,i)=exp(a(i)*Dy(i));
          Di(i,i)=-exp(-a(i)*Dy(i));

        <mwsh:keywords xml:space="preserve">if</mwsh:keywords> i==j+1
           Ai(i,j)=exp(a(j)*Dy(j));
           Bi(i,j)=exp(-a(j)*Dy(j));
        <mwsh:keywords xml:space="preserve">end</mwsh:keywords>;

        <mwsh:keywords xml:space="preserve">if</mwsh:keywords> i==j-1
           Ci(i,j)=-H(i+1)*a(i+1)/a(i);
           Di(i,j)=H(i+1)*a(i+1)/a(i);
        <mwsh:keywords xml:space="preserve">end</mwsh:keywords>;


    <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:comments xml:space="preserve">% Corrections added to the matrices</mwsh:comments>
       Ai(1,1)=1;
       Bi(1,1)=1;
       Di(cs,cs)=-Di(cs,cs);</mwsh:code></mcode-xmlized>
      <mcode-count>2</mcode-count>
      <cellOutputTarget>2</cellOutputTarget>
   </cell>
   <cell>
      <count>3</count>
      <steptitle>Assembling the Final matrix</steptitle>
      <mcode>% Assembling the [γ] matrix
 for i=2:cs
       Gt1(i)=gt(i)-gt(i-1);
 end
      Gt1(1)=-gt(1);
      Gt2(cs)=-gt(cs);


     FM=[Ai,Bi,Gt1';Ci,Di,Gt2'];
        disp('                 ');
        disp('                 ');
        disp('  Final Matrix assembled');
        disp('                 ');
        disp(FM);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve"><mwsh:comments xml:space="preserve">% Assembling the [γ] matrix</mwsh:comments>
 <mwsh:keywords xml:space="preserve">for</mwsh:keywords> i=2:cs
       Gt1(i)=gt(i)-gt(i-1);
 <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
      Gt1(1)=-gt(1);
      Gt2(cs)=-gt(cs);


     FM=[Ai,Bi,Gt1';Ci,Di,Gt2'];
        disp(<mwsh:strings xml:space="preserve">'                 '</mwsh:strings>);
        disp(<mwsh:strings xml:space="preserve">'                 '</mwsh:strings>);
        disp(<mwsh:strings xml:space="preserve">'  Final Matrix assembled'</mwsh:strings>);
        disp(<mwsh:strings xml:space="preserve">'                 '</mwsh:strings>);
        disp(FM);</mwsh:code></mcode-xmlized>
      <mcode-count>3</mcode-count>
      <cellOutputTarget>3</cellOutputTarget>
      <mcodeoutput>                 
                 
  Final Matrix assembled
                 
  1.0000e+000            0  1.0000e+000            0 -2.5533e-002
  5.0759e+002 -1.0000e+000  1.9701e-003 -1.0000e+000  3.8806e-002
  5.0759e+002 -8.4090e-001 -1.9701e-003  8.4090e-001            0
            0  3.0652e+002            0  3.2624e-003 -6.4339e-002

</mcodeoutput>
   </cell>
   <cell>
      <count>4</count>
      <steptitle>Gauss-Jordan Elimination</steptitle>
      <mcode>  GJ=rref(FM);

     rGJ=cs*2;
      cGJ=cs*2+1;
       GJn=GJ(1:rGJ,cGJ);
         format short e;

         Ca=GJn(1:cs);
         Cb=GJn(cs+1:rGJ);
           CC=[Ca,Cb];
              disp('                      ')
              disp('       Ca           Cb');
              disp(CC);</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">  GJ=rref(FM);

     rGJ=cs*2;
      cGJ=cs*2+1;
       GJn=GJ(1:rGJ,cGJ);
         format <mwsh:strings xml:space="preserve">short</mwsh:strings> <mwsh:strings xml:space="preserve">e</mwsh:strings>;

         Ca=GJn(1:cs);
         Cb=GJn(cs+1:rGJ);
           CC=[Ca,Cb];
              disp(<mwsh:strings xml:space="preserve">'                      '</mwsh:strings>)
              disp(<mwsh:strings xml:space="preserve">'       Ca           Cb'</mwsh:strings>);
              disp(CC);</mwsh:code></mcode-xmlized>
      <mcode-count>4</mcode-count>
      <cellOutputTarget>4</cellOutputTarget>
      <mcodeoutput>                      
       Ca           Cb
  3.4536e-005 -2.5568e-002
 -2.0968e-004 -2.1117e-002

</mcodeoutput>
   </cell>
   <cell>
      <count>5</count>
      <steptitle>Deferential equation</steptitle>
      <mcode>Ui=zeros(cs,Sum);
Qan=0;
q=0;
ss=1;
for z=1:cs

        W=zeros(1,Sum);
            yi=linspace(0,Dy(z),Sum);
               if z==1
                  y(ss:z*Sum)=yi;
               else
                  y(ss:z*Sum)=yi+y((z-1)*Sum);
               end;

    W=Ca(z)*exp(a(z)*yi)+ Cb(z)*exp(-a(z)*yi)+gt(z);
        Ui(z,1:Sum)=sqrt(W);
             U(ss:z*Sum)=Ui(z,1:Sum);
                 ss=ss+Sum;

% Calculate the Discharge Analyticaly
       dy=Dy(z)/Sum;
       for l=1:Sum
          q=Ui(z,l)*h(z)*dy;
          Qan=Qan+q;
          q=0;
       end
       dy=0;



end

% $Example
% Discharge for compound channel with two rectangular cross-sections
% Manning equation
   A1=h(1)*Dy(1);
   A2=h(2)*Dy(2);
   P1=h(1)+Dy(1);
   P2=h(2)+Dy(2)+(h(2)-h(1));
   R1=A1/P1;
   R2=A2/P2;

   q1=1/n(1)*A1*R1^(2/3)*s^0.5;
   q2=1/n(2)*A2*R2^(2/3)*s^0.5;
   Qm=q2+q1;

   Q=[Qan,Qm];

% Print on screen the results
   disp('      Discharge (m^3/s)');
   disp(' ');
   disp('       Qan        Qman  ');
   disp(Q);
% $End of Exmaple</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">Ui=zeros(cs,Sum);
Qan=0;
q=0;
ss=1;
<mwsh:keywords xml:space="preserve">for</mwsh:keywords> z=1:cs

        W=zeros(1,Sum);
            yi=linspace(0,Dy(z),Sum);
               <mwsh:keywords xml:space="preserve">if</mwsh:keywords> z==1
                  y(ss:z*Sum)=yi;
               <mwsh:keywords xml:space="preserve">else</mwsh:keywords>
                  y(ss:z*Sum)=yi+y((z-1)*Sum);
               <mwsh:keywords xml:space="preserve">end</mwsh:keywords>;

    W=Ca(z)*exp(a(z)*yi)+ Cb(z)*exp(-a(z)*yi)+gt(z);
        Ui(z,1:Sum)=sqrt(W);
             U(ss:z*Sum)=Ui(z,1:Sum);
                 ss=ss+Sum;

<mwsh:comments xml:space="preserve">% Calculate the Discharge Analyticaly</mwsh:comments>
       dy=Dy(z)/Sum;
       <mwsh:keywords xml:space="preserve">for</mwsh:keywords> l=1:Sum
          q=Ui(z,l)*h(z)*dy;
          Qan=Qan+q;
          q=0;
       <mwsh:keywords xml:space="preserve">end</mwsh:keywords>
       dy=0;



<mwsh:keywords xml:space="preserve">end</mwsh:keywords>

<mwsh:comments xml:space="preserve">% $Example</mwsh:comments>
<mwsh:comments xml:space="preserve">% Discharge for compound channel with two rectangular cross-sections</mwsh:comments>
<mwsh:comments xml:space="preserve">% Manning equation</mwsh:comments>
   A1=h(1)*Dy(1);
   A2=h(2)*Dy(2);
   P1=h(1)+Dy(1);
   P2=h(2)+Dy(2)+(h(2)-h(1));
   R1=A1/P1;
   R2=A2/P2;

   q1=1/n(1)*A1*R1^(2/3)*s^0.5;
   q2=1/n(2)*A2*R2^(2/3)*s^0.5;
   Qm=q2+q1;

   Q=[Qan,Qm];

<mwsh:comments xml:space="preserve">% Print on screen the results</mwsh:comments>
   disp(<mwsh:strings xml:space="preserve">'      Discharge (m^3/s)'</mwsh:strings>);
   disp(<mwsh:strings xml:space="preserve">' '</mwsh:strings>);
   disp(<mwsh:strings xml:space="preserve">'       Qan        Qman  '</mwsh:strings>);
   disp(Q);
<mwsh:comments xml:space="preserve">% $End of Exmaple</mwsh:comments></mwsh:code></mcode-xmlized>
      <mcode-count>5</mcode-count>
      <cellOutputTarget>5</cellOutputTarget>
      <mcodeoutput>      Discharge (m^3/s)
 
       Qan        Qman  
  4.7705e-003  4.8482e-003

</mcodeoutput>
   </cell>
   <cell>
      <count>6</count>
      <steptitle>Plot</steptitle>
      <mcode>B=sum(Dy);

plot(y,U);
%Setting the graph borders
axis ([0 B+B/20 0 B+B/20]) ;
xlabel('y(m)');
ylabel('U(m/s)');
title('Compound open-channel velocity profile');

%________________________________## END ##_________________________________</mcode>
      <mcode-xmlized>
         <mwsh:code xml:space="preserve">B=sum(Dy);

plot(y,U);
<mwsh:comments xml:space="preserve">%Setting the graph borders</mwsh:comments>
axis ([0 B+B/20 0 B+B/20]) ;
xlabel(<mwsh:strings xml:space="preserve">'y(m)'</mwsh:strings>);
ylabel(<mwsh:strings xml:space="preserve">'U(m/s)'</mwsh:strings>);
title(<mwsh:strings xml:space="preserve">'Compound open-channel velocity profile'</mwsh:strings>);

<mwsh:comments xml:space="preserve">%________________________________## END ##_________________________________</mwsh:comments></mwsh:code></mcode-xmlized>
      <mcode-count>6</mcode-count>
      <cellOutputTarget>6</cellOutputTarget>
      <img src="VelocityProfile_01.png"/>
   </cell>
   <originalCode>%% Program VePro&#xD;
%      The  program VePro, using a  linearized fully parabolic version    &#xD;
%    of the  depth-averaged  flow  equations, calculates an analytical     &#xD;
%    solution for the transverse distribution of longitudinal velosity    &#xD;
%    in  rectangular channels  and  as well as in channels of compound    &#xD;
%    cross-section.                                                       &#xD;
%      The program  also calculates the  discharge with the Analytical    &#xD;
%    method and with the Mannings formula.                                                                           &#xD;
%    Here  we give an  example  for a channel with two  cross-sections.   &#xD;
&#xD;
&#xD;
    %_____________________________# INPUT #________________________________  &#xD;
    % Insert the sum of the cross sections &#xD;
    cs=2;&#xD;
    &#xD;
    % Insert the hights hi=[h1,h2,h3....hv]&#xD;
    hi=[0.025,0.05];&#xD;
    &#xD;
    % Insert the width of each cross section Dy=[Dy1,Dy2,Dy3....Dyv]&#xD;
    Dy=[0.19,0.37];&#xD;
    &#xD;
    % Insert the manning number ni=[n1,n2,n3....nv]&#xD;
    ni=[0.0116,0.0116];&#xD;
    &#xD;
    % Insert the discretization accuracy&#xD;
    Sum=1000;&#xD;
    &#xD;
    % Insert the slope&#xD;
    s=0.00047;&#xD;
     &#xD;
    % Insert the Gravity (m/s^2)&#xD;
    g=9.81;&#xD;
    &#xD;
    % Insert the cv=[cv1,cv2,cv3....cvv]&#xD;
    Cv=[0.20,0.20];&#xD;
    %______________________________________________________________________&#xD;
&#xD;
%__________________________________## BEGIN ##_____________________________    &#xD;
%Setting the matrices where we will save the parameters&#xD;
    h=[hi,0];&#xD;
    n=[ni,0];&#xD;
    a=zeros(1,cs);&#xD;
    b=zeros(1,cs);&#xD;
    Cf=zeros(1,cs);&#xD;
    gt=zeros(1,cs);&#xD;
    H=zeros(1,cs+1);&#xD;
    Ai=zeros(1,cs);&#xD;
    Bi=zeros(1,cs);&#xD;
    Ci=zeros(1,cs);&#xD;
    Di=zeros(1,cs);&#xD;
    Gt1=zeros(1,cs);&#xD;
    Gt2=zeros(1,cs);&#xD;
    Ca=zeros(1,cs);&#xD;
    Cb=zeros(1,cs);&#xD;
     &#xD;
% Calculate the α, b, γ parameters for each cross-section  &#xD;
    &#xD;
    for k=1:cs&#xD;
        &#xD;
        Cf(k)=n(k)^2*g/(h(k)^(1/3));    &#xD;
        a(k)=sqrt(2*sqrt(Cf(k))/(Cv(k)*h(k)^2));    &#xD;
        b(k)=-a(k)^2*g*(h(k))*s/Cf(k);&#xD;
        gt(k)=-b(k)/a(k)^2;&#xD;
&#xD;
        H(k+1)=(n(k+1)/n(k))*(h(k+1)/h(k))^(5/6);&#xD;
    end&#xD;
   &#xD;
% Print on screen the matrices [Cf],[a],[b],[γ]&#xD;
   sp=[Cf',a',b',gt'];&#xD;
   format short e;&#xD;
   disp('     [Cf]          [a]          [b]          [γ]');        &#xD;
   disp(sp);&#xD;
      &#xD;
%% Assembling the matrices  A,B,C,D&#xD;
  &#xD;
for i=1:cs&#xD;
    for j=1:cs &#xD;
       &#xD;
          Ai(i,i)=-1;&#xD;
          Bi(i,i)=-1; &#xD;
          &#xD;
          Ci(i,i)=exp(a(i)*Dy(i)); &#xD;
          Di(i,i)=-exp(-a(i)*Dy(i));&#xD;
          &#xD;
        if i==j+1&#xD;
           Ai(i,j)=exp(a(j)*Dy(j));&#xD;
           Bi(i,j)=exp(-a(j)*Dy(j));&#xD;
        end;&#xD;
      &#xD;
        if i==j-1 &#xD;
           Ci(i,j)=-H(i+1)*a(i+1)/a(i);&#xD;
           Di(i,j)=H(i+1)*a(i+1)/a(i);&#xD;
        end;   &#xD;
&#xD;
        &#xD;
    end&#xD;
end&#xD;
&#xD;
% Corrections added to the matrices&#xD;
       Ai(1,1)=1;&#xD;
       Bi(1,1)=1;&#xD;
       Di(cs,cs)=-Di(cs,cs);&#xD;
       &#xD;
%% Assembling the Final matrix&#xD;
&#xD;
% Assembling the [γ] matrix&#xD;
 for i=2:cs&#xD;
       Gt1(i)=gt(i)-gt(i-1); &#xD;
 end         &#xD;
      Gt1(1)=-gt(1);         &#xD;
      Gt2(cs)=-gt(cs);&#xD;
&#xD;
&#xD;
     FM=[Ai,Bi,Gt1';Ci,Di,Gt2'];&#xD;
        disp('                 ');&#xD;
        disp('                 ');&#xD;
        disp('  Final Matrix assembled');&#xD;
        disp('                 ');&#xD;
        disp(FM);&#xD;
                  &#xD;
%% Gauss-Jordan Elimination&#xD;
  GJ=rref(FM);&#xD;
                &#xD;
     rGJ=cs*2;&#xD;
      cGJ=cs*2+1;&#xD;
       GJn=GJ(1:rGJ,cGJ);&#xD;
         format short e;&#xD;
        &#xD;
         Ca=GJn(1:cs);&#xD;
         Cb=GJn(cs+1:rGJ);&#xD;
           CC=[Ca,Cb];&#xD;
              disp('                      ') &#xD;
              disp('       Ca           Cb');&#xD;
              disp(CC);&#xD;
              &#xD;
%% Deferential equation&#xD;
Ui=zeros(cs,Sum);&#xD;
Qan=0;&#xD;
q=0;&#xD;
ss=1; &#xD;
for z=1:cs&#xD;
   &#xD;
        W=zeros(1,Sum);&#xD;
            yi=linspace(0,Dy(z),Sum);&#xD;
               if z==1         &#xD;
                  y(ss:z*Sum)=yi;&#xD;
               else&#xD;
                  y(ss:z*Sum)=yi+y((z-1)*Sum);&#xD;
               end;&#xD;
&#xD;
    W=Ca(z)*exp(a(z)*yi)+ Cb(z)*exp(-a(z)*yi)+gt(z); &#xD;
        Ui(z,1:Sum)=sqrt(W);&#xD;
             U(ss:z*Sum)=Ui(z,1:Sum);&#xD;
                 ss=ss+Sum;&#xD;
                    &#xD;
% Calculate the Discharge Analyticaly&#xD;
       dy=Dy(z)/Sum;&#xD;
       for l=1:Sum&#xD;
          q=Ui(z,l)*h(z)*dy;&#xD;
          Qan=Qan+q;&#xD;
          q=0;&#xD;
       end  &#xD;
       dy=0; &#xD;
&#xD;
&#xD;
&#xD;
end&#xD;
&#xD;
% $Example&#xD;
% Discharge for compound channel with two rectangular cross-sections&#xD;
% Manning equation&#xD;
   A1=h(1)*Dy(1);&#xD;
   A2=h(2)*Dy(2);&#xD;
   P1=h(1)+Dy(1);  &#xD;
   P2=h(2)+Dy(2)+(h(2)-h(1));     &#xD;
   R1=A1/P1;&#xD;
   R2=A2/P2;&#xD;
&#xD;
   q1=1/n(1)*A1*R1^(2/3)*s^0.5;&#xD;
   q2=1/n(2)*A2*R2^(2/3)*s^0.5;&#xD;
   Qm=q2+q1;&#xD;
&#xD;
   Q=[Qan,Qm];&#xD;
&#xD;
% Print on screen the results &#xD;
   disp('      Discharge (m^3/s)');&#xD;
   disp(' ');&#xD;
   disp('       Qan        Qman  ');&#xD;
   disp(Q);&#xD;
% $End of Exmaple&#xD;
&#xD;
%% Plot &#xD;
B=sum(Dy);&#xD;
 &#xD;
plot(y,U);&#xD;
%Setting the graph borders&#xD;
axis ([0 B+B/20 0 B+B/20]) ;&#xD;
xlabel('y(m)');&#xD;
ylabel('U(m/s)');&#xD;
title('Compound open-channel velocity profile');&#xD;
&#xD;
%________________________________## END ##_________________________________&#xD;
</originalCode>
   <m-file>VelocityProfile</m-file>
   <filename>F:\##DIPLOMATIKH##\VePro\VelocityProfile.m</filename>
   <outputdir>F:\##DIPLOMATIKH##\VePro\html</outputdir>
</mscript>